let print = console.log
// doc 
print(document.documentElement);
// выводит полностью всю нашу html структуру нашего сайта
// мы получили доступ к самому главному тегу в документе - тегу html 

print(document.body);
// доступ к тегу боди и всему что есть внутри его
print(document.head);
// доступ к тегу хед

// доступ к первому элементу внутри тега боди 
print(document.body.firstChild);
// доступ к последнему элементу внутри тега боди 
print(document.body.lastChild);
// доступ к всем элементам внутри тега боди 
print(document.body.childNodes);

// выводим все дочерные элементы через цыкл
for(var i = 0; i < document.body.childNodes.length; i ++) {
    print(document.body.childNodes[i]);
};

// вот так просто мы кстати можем обращаться к элементу по его айди :
// print(txt_in_div); - пришлось закоментировать из за конфликта
// для такого метода необходимо чтобы наше название айди не совпадало с названиями переменных и функций
// лучше всего для этого использовать такую конструкцию как:
let txt_in_div = document.getElementById("txt_in_div");
print(txt_in_div);

// Выбираем элементы по названию их тега внутри нашего айди обьекта:
let p = txt_in_div.getElementsByTagName('p');
print(p);
// getElementsByTagName - это набор элементов, поэтому чтобы нам вывести все теги п в человеческом виде обращаемся к цыклу
for(i = 0; i < p.length; i++) {
    print(p[i]);
};

// .getElementsByTagName('*'); - чтобы получить все дочерние элементы внутри какого либо обьекта или тега

let p_2 = document.getElementsByTagName('p')[1];
// выбираем во всем документе теги п и выводим второй тег п
print(p_2);

// выбираем элементы по атрибуту name:
el = document.getElementsByName('fname');
print(el);
// будет выведен масив с одним элементом
print(el[0].tagName);
// будет выведен наш инпут с name="fname"
// .tagName - означает что мы выбираем только название тега без его характеристик
// .className - только имя класа элемента

// выбираем элементы по их класу
let allClases =document.getElementsByClassName('some');
// масив элементов класса сом 
print(allClases.length);
// количество элементов в масиве
let txtClases = document.getElementsByClassName('txt')[0];
// выбираем первый элемент с класом текст (уже будет не масив а просто элемент)

// выборка элементов по опреденному селектору (возвращает масив)
let qery = document.querySelectorAll("div > p.some");
print(qery[0]);
// селекторы прописуются точно так же как мы их прописывали в css 
// здесь мы выбрали теги п класа сом , только те которые находятся внутри тега див

// .querySelector() - возвращает первый элемент по заданому селектору

// выборка по ближайшему родительскому элементу .closest
let txtSpan = document.querySelector('#txt_span');
let parentP = txtSpan.closest('p');
// в .closest (мы можем искать по класам , дурим атрибутам и селекторам потому как клозест работает только с квери селектор)

// работа с текстом и другим содержимым после выбора нашим селектором 
print(parentP.innerHTML);
// получаем значение все что находися внутри нашего селектора
parentP.innerHTML = 'Новое значение';
// .innerHTML - заменяем полностью все содержимое внутри нашего селектора на "новое значение "

let input = document.querySelector('input.some');
input.value = 'Что-то новое';
input.className = 'some new test'
// заменяем значение value которое до этого было value="some old" на новое значение value='Что-то новое'
// и устанавливаем новые 3 класа для инпута


// Работа с атрибутами html тегов

let a = input.hasAttribute('title');
// узнаем есть есть ли у нашего обьекта инпут такой атрибут как титл - значени тру или фолс

a = input.getAttribute('value');
// получаем значение атрибута value , при этом мы получили значение которое у нас еще не переписано "some old"

input.setAttribute("placeholder", "some placeholder");
// добавляем новый атрибут к нашему тегу, первый аргумент - название атрибута, второй - его значение
input.setAttribute("type", "password");
// переделываем старый атрибут тайп текст на новый тайп пасворд 

input.removeAttribute('id');
// удаляет атрибут у нашего тега 

document.write("текст внутри write");
// встраивает текст внутри нашего документа в самом конце

input.style.opacity = '0.5';
// установка значения прозрачности через js . Таким образом можно устанавливать значения для многих характеристик которые состоят из одного слова , например колор, ширина , высота и т.д. Если наше свойство-характеристика состоит из нескольких слов , например бордер радиус или мерджин топ и т.д. , в таком случае мы удаляем дефис и вместо него второе слово пишем с большой буквы
input.style.backgroundColor = 'yellow';
